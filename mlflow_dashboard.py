#!/usr/bin/env python3
"""
Script pour analyser et afficher les r√©sultats des exp√©riences MLflow
"""

import mlflow
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import json

def setup_mlflow():
    """Configure MLflow pour l'analyse"""
    mlflow.set_tracking_uri("file:./mlruns")
    mlflow.set_experiment("kouskous2025_extraction")

def get_experiment_data():
    """R√©cup√®re les donn√©es des exp√©riences"""
    setup_mlflow()
    
    # Obtenir l'exp√©rience
    experiment = mlflow.get_experiment_by_name("kouskous2025_extraction")
    if not experiment:
        print("‚ùå Aucune exp√©rience 'kouskous2025_extraction' trouv√©e")
        return None
    
    # Rechercher tous les runs
    runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id])
    return runs

def analyze_performance(runs_df):
    """Analyse les performances des extractions"""
    if runs_df.empty:
        print("‚ùå Aucun run trouv√© dans l'exp√©rience")
        return
    
    print("üìä ANALYSE DES PERFORMANCES")
    print("=" * 50)
    
    # M√©triques de base
    if 'metrics.total_restaurants' in runs_df.columns:
        total_restaurants = runs_df['metrics.total_restaurants'].dropna()
        if not total_restaurants.empty:
            print(f"üçΩÔ∏è  Restaurants extraits:")
            print(f"   ‚Ä¢ Moyenne: {total_restaurants.mean():.1f}")
            print(f"   ‚Ä¢ Maximum: {total_restaurants.max():.0f}")
            print(f"   ‚Ä¢ Minimum: {total_restaurants.min():.0f}")
    
    if 'metrics.total_plats' in runs_df.columns:
        total_plats = runs_df['metrics.total_plats'].dropna()
        if not total_plats.empty:
            print(f"\nüçú Plats extraits:")
            print(f"   ‚Ä¢ Moyenne: {total_plats.mean():.1f}")
            print(f"   ‚Ä¢ Maximum: {total_plats.max():.0f}")
            print(f"   ‚Ä¢ Minimum: {total_plats.min():.0f}")
    
    if 'metrics.total_run_time' in runs_df.columns:
        run_times = runs_df['metrics.total_run_time'].dropna()
        if not run_times.empty:
            print(f"\n‚è±Ô∏è  Temps d'ex√©cution:")
            print(f"   ‚Ä¢ Moyenne: {run_times.mean():.1f}s")
            print(f"   ‚Ä¢ Maximum: {run_times.max():.1f}s")
            print(f"   ‚Ä¢ Minimum: {run_times.min():.1f}s")
    
    if 'metrics.success_rate' in runs_df.columns:
        success_rates = runs_df['metrics.success_rate'].dropna()
        if not success_rates.empty:
            print(f"\n‚úÖ Taux de succ√®s:")
            print(f"   ‚Ä¢ Moyenne: {success_rates.mean():.1%}")
            print(f"   ‚Ä¢ Maximum: {success_rates.max():.1%}")
            print(f"   ‚Ä¢ Minimum: {success_rates.min():.1%}")

def show_latest_run_details():
    """Affiche les d√©tails du dernier run"""
    setup_mlflow()
    
    # Obtenir le dernier run
    runs = mlflow.search_runs(
        experiment_ids=[mlflow.get_experiment_by_name("kouskous2025_extraction").experiment_id],
        order_by=["start_time DESC"],
        max_results=1
    )
    
    if runs.empty:
        print("‚ùå Aucun run trouv√©")
        return
    
    latest_run = runs.iloc[0]
    
    print("üîç DERNIER RUN D√âTAILL√â")
    print("=" * 50)
    print(f"üÜî Run ID: {latest_run['run_id']}")
    print(f"üìÖ Date: {latest_run['start_time']}")
    print(f"‚è±Ô∏è  Dur√©e: {latest_run.get('metrics.total_run_time', 'N/A')}s")
    print(f"üè∑Ô∏è  Mod√®le: {latest_run.get('params.model', 'N/A')}")
    
    # M√©triques principales
    metrics_to_show = [
        ('total_restaurants', 'üçΩÔ∏è  Restaurants extraits'),
        ('total_plats', 'üçú Plats extraits'),
        ('vegetarian_plats', 'üå± Plats v√©g√©tariens'),
        ('vegan_plats', 'üåø Plats vegan'),
        ('successful_files', '‚úÖ Fichiers trait√©s avec succ√®s'),
        ('failed_files', '‚ùå Fichiers en erreur'),
        ('success_rate', 'üìà Taux de succ√®s')
    ]
    
    print("\nüìä M√©triques:")
    for metric_key, description in metrics_to_show:
        value = latest_run.get(f'metrics.{metric_key}', None)
        if value is not None:
            if metric_key == 'success_rate':
                print(f"   {description}: {value:.1%}")
            else:
                print(f"   {description}: {value:.0f}")

def show_quartiers_distribution():
    """Affiche la distribution des restaurants par quartier"""
    setup_mlflow()
    
    # Obtenir le dernier run
    runs = mlflow.search_runs(
        experiment_ids=[mlflow.get_experiment_by_name("kouskous2025_extraction").experiment_id],
        order_by=["start_time DESC"],
        max_results=1
    )
    
    if runs.empty:
        return
    
    latest_run = runs.iloc[0]
    
    print("\nüó∫Ô∏è  DISTRIBUTION PAR QUARTIER")
    print("=" * 50)
    
    # Chercher les m√©triques de quartier
    quartier_metrics = []
    for col in latest_run.index:
        if col.startswith('metrics.restaurants_in_'):
            quartier = col.replace('metrics.restaurants_in_', '').replace('_', ' ').title()
            count = latest_run[col]
            if pd.notna(count) and count > 0:
                quartier_metrics.append((quartier, int(count)))
    
    # Trier par nombre de restaurants
    quartier_metrics.sort(key=lambda x: x[1], reverse=True)
    
    for quartier, count in quartier_metrics:
        print(f"   üìç {quartier}: {count} restaurant(s)")

def create_performance_chart():
    """Cr√©e un graphique des performances au fil du temps"""
    runs_df = get_experiment_data()
    if runs_df is None or runs_df.empty:
        return
    
    # Pr√©parer les donn√©es pour le graphique
    if 'metrics.total_restaurants' in runs_df.columns and 'start_time' in runs_df.columns:
        plt.figure(figsize=(12, 6))
        
        # Convertir les timestamps
        runs_df['start_time'] = pd.to_datetime(runs_df['start_time'])
        runs_df = runs_df.sort_values('start_time')
        
        # Graphique 1: √âvolution du nombre de restaurants
        plt.subplot(1, 2, 1)
        plt.plot(runs_df['start_time'], runs_df['metrics.total_restaurants'], 'bo-')
        plt.title('√âvolution du nombre de restaurants extraits')
        plt.xlabel('Date')
        plt.ylabel('Nombre de restaurants')
        plt.xticks(rotation=45)
        
        # Graphique 2: Temps d'ex√©cution
        if 'metrics.total_run_time' in runs_df.columns:
            plt.subplot(1, 2, 2)
            plt.plot(runs_df['start_time'], runs_df['metrics.total_run_time'], 'ro-')
            plt.title('√âvolution du temps d\'ex√©cution')
            plt.xlabel('Date')
            plt.ylabel('Temps (secondes)')
            plt.xticks(rotation=45)
        
        plt.tight_layout()
        
        # Sauvegarder le graphique
        chart_path = Path("output/mlflow_performance_chart.png")
        chart_path.parent.mkdir(exist_ok=True)
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        print(f"\nüìà Graphique sauvegard√©: {chart_path}")
        
        # Afficher le graphique si possible
        try:
            plt.show()
        except:
            print("   (Affichage graphique non disponible en mode headless)")

def main():
    """Fonction principale du dashboard"""
    print("üî¨ DASHBOARD MLFLOW - KOUSKOUS 2025")
    print("=" * 60)
    
    # V√©rifier que MLflow est configur√©
    if not Path("mlruns").exists():
        print("‚ùå Dossier 'mlruns' non trouv√©.")
        print("   Lancez d'abord le script principal pour cr√©er des exp√©riences.")
        return
    
    try:
        # Analyser les donn√©es
        runs_df = get_experiment_data()
        
        if runs_df is not None and not runs_df.empty:
            print(f"üìä {len(runs_df)} run(s) trouv√©(s) dans l'exp√©rience")
            
            # Analyses
            analyze_performance(runs_df)
            show_latest_run_details()
            show_quartiers_distribution()
            
            # Cr√©er les graphiques
            print("\nüìà G√©n√©ration des graphiques...")
            create_performance_chart()
            
        else:
            print("‚ùå Aucune donn√©e d'exp√©rience trouv√©e")
            print("   Lancez d'abord le script principal pour cr√©er des exp√©riences.")
    
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
    
    print(f"\nüí° Pour voir l'interface MLflow web, lancez: python launch_mlflow.py")

if __name__ == "__main__":
    # Installer les d√©pendances si n√©cessaire
    try:
        import matplotlib.pyplot as plt
        import seaborn as sns
    except ImportError:
        print("‚ö†Ô∏è  D√©pendances graphiques non install√©es.")
        print("   Pour les graphiques, installez: pip install matplotlib seaborn")
    
    main()
